name: Continuous integration
on: [push]
jobs:
  n0100:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get install build-essential imagemagick libfreetype6-dev libjpeg-dev libpng-dev pkg-config
      - uses: numworks/setup-arm-toolchain@2020-q2
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - run: mkdir final-output
      - run: make -j2 MODEL=n0100 EPSILON_I18N=en output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.en.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 EPSILON_I18N=fr output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.fr.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 EPSILON_I18N=nl output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.nl.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 EPSILON_I18N=pt output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.pt.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 EPSILON_I18N=it output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.it.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 EPSILON_I18N=de output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.de.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 EPSILON_I18N=es output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.es.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 EPSILON_I18N=hu output/release/device/n0100/epsilon.onboarding.two_binaries
      - run: mv output/release/device/n0100/epsilon.onboarding.internal.bin final-output/epsilon.onboarding.internal.hu.bin
      - run: rm output/release/device/n0100/apps/i18n.o output/release/device/n0100/apps/i18n.cpp
      - run: make -j2 MODEL=n0100 output/release/device/n0100/flasher.light.bin
      - run: mv output/release/device/n0100/flasher.light.bin final-output/flasher.light.bin
      - run: find final-output/ -type f -exec bash -c "shasum -a 256 -b {} > {}.sha256" \;
      - run: tar cvfz binpack-n0100.tgz final-output/*
      - id: 'auth'
        if: ${{ github.event_name == 'push' && github.ref_name == 'upsilon-dev' && github.repository == 'UpsilonNumworks/Upsilon'}}
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{secrets.GOOGLE_CREDENTIALS}}'
      - id: 'upload-directory'
        if: ${{ github.event_name == 'push' && github.ref_name == 'upsilon-dev' && github.repository == 'UpsilonNumworks/Upsilon'}}
        uses: 'google-github-actions/upload-cloud-storage@v0'
        with:
          path: 'final-output/'
          destination: 'upsilon-binfiles.appspot.com/dev/n100/'
          parent: false
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-binpack-n0100.tgz
          path: binpack-n0100.tgz
  n0110:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get install build-essential imagemagick libfreetype6-dev libjpeg-dev libpng-dev pkg-config
      - uses: numworks/setup-arm-toolchain@2020-q2
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - run: make -j2 MODEL=n0110 epsilon.dfu
      - run: make -j2 MODEL=n0110 epsilon.onboarding.dfu
      - run: make -j2 MODEL=n0110 epsilon.onboarding.update.dfu
      - run: make -j2 MODEL=n0110 epsilon.onboarding.beta.dfu
      - run: make -j2 MODEL=n0110 flasher.light.dfu
      - run: make -j2 MODEL=n0110 flasher.verbose.dfu
      # We  don't need bench as it is used only in factory
      # - run: make -j2 bench.ram.dfu
      # - run: make -j2 bench.flash.dfu
      - run: make -j2 MODEL=n0110 binpack
      - run: cp output/release/device/n0110/binpack-n0110-`git rev-parse HEAD | head -c 7`.tgz output/release/device/n0110/binpack-n0110.tgz
      - id: 'auth'
        if: ${{ github.event_name == 'push' && github.ref_name == 'upsilon-dev' && github.repository == 'UpsilonNumworks/Upsilon' }}
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{secrets.GOOGLE_CREDENTIALS}}'
      - id: 'upload-directory'
        if: ${{ github.event_name == 'push' && github.ref_name == 'upsilon-dev' && github.repository == 'UpsilonNumworks/Upsilon' }}
        uses: 'google-github-actions/upload-cloud-storage@v0'
        with:
          path: 'output/release/device/n0110/binpack/'
          destination: 'upsilon-binfiles.appspot.com/dev/n110/'
          parent: false
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-binpack-n0110.tgz
          path: output/release/device/n0110/binpack-n0110.tgz

env:
  ACCEPT_OFFICIAL_TOS: 1
